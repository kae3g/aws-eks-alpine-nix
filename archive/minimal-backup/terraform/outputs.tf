# Outputs for NixOS EKS Infrastructure

# VPC Information
output "vpc_id" {
  description = "ID of the VPC"
  value       = aws_vpc.main.id
}

output "vpc_cidr_block" {
  description = "CIDR block of the VPC"
  value       = aws_vpc.main.cidr_block
}

output "private_subnet_ids" {
  description = "IDs of the private subnets"
  value       = aws_subnet.private[*].id
}

output "public_subnet_ids" {
  description = "IDs of the public subnets"
  value       = aws_subnet.public[*].id
}

# EKS Cluster Information
output "cluster_id" {
  description = "ID of the EKS cluster"
  value       = aws_eks_cluster.main.id
}

output "cluster_arn" {
  description = "ARN of the EKS cluster"
  value       = aws_eks_cluster.main.arn
}

output "cluster_name" {
  description = "Name of the EKS cluster"
  value       = aws_eks_cluster.main.name
}

output "cluster_endpoint" {
  description = "Endpoint for EKS control plane"
  value       = aws_eks_cluster.main.endpoint
}

output "cluster_security_group_id" {
  description = "Security group ID attached to the EKS cluster"
  value       = aws_eks_cluster.main.vpc_config[0].cluster_security_group_id
}

output "cluster_certificate_authority_data" {
description = "Base64 encoded certificate data required to communicate with the
cluster"
  value       = aws_eks_cluster.main.certificate_authority[0].data
}

output "cluster_oidc_issuer_url" {
description = "The URL on the EKS cluster for the OpenID Connect identity
provider"
  value       = aws_eks_cluster.main.identity[0].oidc[0].issuer
}

# Node Group Information
output "node_group_arn" {
  description = "ARN of the EKS node group"
  value       = aws_eks_node_group.main.arn
}

output "node_group_status" {
  description = "Status of the EKS node group"
  value       = aws_eks_node_group.main.status
}

# IAM Information
output "cluster_iam_role_name" {
  description = "IAM role name associated with EKS cluster"
  value       = aws_iam_role.eks_cluster.name
}

output "node_group_iam_role_name" {
  description = "IAM role name associated with EKS node group"
  value       = aws_iam_role.eks_node_group.name
}

# Security Groups
output "cluster_security_group_id" {
  description = "Security group ID for the EKS cluster"
  value       = aws_security_group.eks_cluster.id
}

output "node_security_group_id" {
  description = "Security group ID for the EKS nodes"
  value       = aws_security_group.eks_nodes.id
}

# KMS Key (if enabled)
output "kms_key_id" {
  description = "KMS key ID for EKS encryption"
  value       = var.enable_encryption ? aws_kms_key.eks[0].key_id : null
}

output "kms_key_arn" {
  description = "KMS key ARN for EKS encryption"
  value       = var.enable_encryption ? aws_kms_key.eks[0].arn : null
}

# OIDC Provider (if enabled)
output "oidc_provider_arn" {
  description = "ARN of the OIDC provider"
value       = var.enable_irsa ? aws_iam_openid_connect_provider.eks[0].arn :
null
}

# kubectl Configuration
output "kubectl_config" {
  description = "kubectl config as generated by the module"
  value = {
    host                   = aws_eks_cluster.main.endpoint
cluster_ca_certificate =
base64decode(aws_eks_cluster.main.certificate_authority[0].data)
    token                  = data.aws_eks_cluster_auth.main.token
  }
  sensitive = true
}

# Data source for cluster auth
data "aws_eks_cluster_auth" "main" {
  name = aws_eks_cluster.main.name
}

# CloudWatch Log Group (if enabled)
output "cloudwatch_log_group_name" {
  description = "Name of the CloudWatch log group for EKS cluster"
value       = var.enable_cluster_logging ?
aws_cloudwatch_log_group.eks_cluster[0].name : null
}

# Cost and Resource Information
output "estimated_monthly_cost" {
  description = "Estimated monthly cost for the infrastructure"
  value = {
    eks_cluster = "~$72/month"
    node_group  = "~$${var.node_group_desired_size * 30}/month (t3.medium)"
    nat_gateway = "~$${length(var.public_subnet_cidrs) * 45}/month"
total       = "~$${72 + (var.node_group_desired_size * 30) +
(length(var.public_subnet_cidrs) * 45)}/month"
  }
}

# Connection Information
output "connection_info" {
  description = "Information needed to connect to the cluster"
  value = {
    cluster_name = aws_eks_cluster.main.name
    region       = var.aws_region
    endpoint     = aws_eks_cluster.main.endpoint
kubectl_config_command = "aws eks update-kubeconfig --region ${var.aws_region}
--name ${aws_eks_cluster.main.name}"
  }
}
